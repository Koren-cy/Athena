/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var F=Object.create;var h=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var E=Object.getPrototypeOf,M=Object.prototype.hasOwnProperty;var b=r=>h(r,"__esModule",{value:!0});var B=(r,e)=>{b(r);for(var t in e)h(r,t,{get:e[t],enumerable:!0})},x=(r,e,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of S(e))!M.call(r,a)&&a!=="default"&&h(r,a,{get:()=>e[a],enumerable:!(t=N(e,a))||t.enumerable});return r},y=r=>x(b(h(r!=null?F(E(r)):{},"default",r&&r.__esModule&&"default"in r?{get:()=>r.default,enumerable:!0}:{value:r,enumerable:!0})),r);B(exports,{default:()=>f});var i=y(require("obsidian"));var m=y(require("obsidian")),g=class extends m.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),new m.Setting(e).setName("Show status bar item").setDesc("Show format brush status in the status bar").addToggle(t=>t.setValue(this.plugin.settings.showStatusBarItem).onChange(async a=>{this.plugin.settings.showStatusBarItem=a,await this.plugin.saveSettings(),this.plugin.updateStatusBar()})),new m.Setting(e).setName("Format attribute").setDesc("These attributes are applied when using the 'Copy format' command, whether through the command palette or the canvas context menu.").setHeading(),new m.Setting(e).setName("Copy size").setDesc("Copy the size from canvas element").addToggle(t=>t.setValue(this.plugin.settings.copySize).onChange(async a=>{this.plugin.settings.copySize=a,await this.plugin.saveSettings()})),new m.Setting(e).setName("Copy color").setDesc("Copy the color from canvas element").addToggle(t=>t.setValue(this.plugin.settings.copyColor).onChange(async a=>{this.plugin.settings.copyColor=a,await this.plugin.saveSettings()})),new m.Setting(e).setName("Advanced").setHeading(),new m.Setting(e).setName("Debug mode").setDesc("Enable detailed logging in the developer console for troubleshooting").addToggle(t=>t.setValue(this.plugin.settings.debugMode).onChange(async a=>{this.plugin.settings.debugMode=a,await this.plugin.saveSettings(),this.plugin.updateLoggerDebugMode()}))}};var v={copyColor:!0,copySize:!0,showStatusBarItem:!0,debugMode:!1};var C=class{constructor(e=!1){this.isDebugMode=e}setDebugMode(e){this.isDebugMode=e}debug(e,...t){this.isDebugMode&&console.log(`[CFB Debug] ${e}`,...t)}info(e,...t){console.log(`[CFB Info] ${e}`,...t)}error(e,...t){console.error(`[CFB Error] ${e}`,...t)}},o=new C;var f=class extends i.Plugin{constructor(){super(...arguments);this.statusBarItem=null;this.copiedFormat=null;this.patchedPopupMenu=!1;this.copyFormatButton=null;this.copyColorButton=null;this.copySizeButton=null;this.pasteFormatButton=null}async onload(){await this.loadSettings(),o.setDebugMode(this.settings.debugMode),this.addSettingTab(new g(this.app,this)),this.addCommand({id:"copy-canvas-format",name:"Copy format",checkCallback:e=>{let t=this.getActiveCanvasView();if(o.debug(`Copy command check - Canvas view: ${!!t}`),t){o.debug(`Canvas selection size: ${t.canvas.selection.size}`),this.settings.debugMode&&o.debug("Canvas data",{selection:Array.from(t.canvas.selection),nodesCount:t.canvas.nodes.size});let a=Array.from(t.canvas.nodes.keys()).slice(0,3);o.debug("Sample node keys:",a)}return t&&t.canvas.selection.size===1?(e||this.copyFormat(t),!0):!1}}),this.addCommand({id:"copy-canvas-size",name:"Copy size",checkCallback:e=>{let t=this.getActiveCanvasView();return t&&t.canvas.selection.size===1?(e||this.copyFormatSizeOnly(t),!0):!1}}),this.addCommand({id:"copy-canvas-color",name:"Copy color",checkCallback:e=>{let t=this.getActiveCanvasView();return t&&t.canvas.selection.size===1?(e||this.copyFormatColorOnly(t),!0):!1}}),this.addCommand({id:"paste-canvas-format",name:"Paste format",checkCallback:e=>{let t=this.getActiveCanvasView();return o.debug(`Paste command check - Canvas view: ${!!t}`),t&&o.debug(`Canvas selection size: ${t.canvas.selection.size}`),t&&t.canvas.selection.size>0&&this.copiedFormat?(e||this.pasteFormat(t),!0):!1}}),this.patchCanvasPopupMenu(),this.initStatusBar(),this.app.workspace.onLayoutReady(()=>{this.patchCanvasPopupMenu()}),this.registerEvent(this.app.workspace.on("active-leaf-change",e=>{e&&e.view&&e.view.getViewType()==="canvas"?(o.debug("Active leaf changed to canvas view"),this.updateStatusBar(),this.patchCanvasPopupMenu()):this.statusBarItem&&(this.statusBarItem.addClass("status-bar-hidden"),this.statusBarItem.removeClass("status-bar-visible"))}))}onunload(){this.statusBarItem&&this.statusBarItem.remove(),o.info("Canvas Format Brush plugin unloaded")}patchCanvasPopupMenu(){try{if(this.patchedPopupMenu){o.debug("Canvas popup menu already patched");return}o.debug("Setting up canvas context menu integration");let e=()=>{let t=this.getActiveCanvasView();if(!t)return o.debug("No active canvas view found, will try again later"),!1;let a=t.canvas;if(!a||!a.menu)return o.debug("Canvas or menu not found, will try again later"),!1;let s=a.menu,n=s.render;return s.render=(...u)=>{let d=n.apply(s,u);if(o.debug("Canvas menu render called, adding format brush button"),s.menuEl&&!s.menuEl.querySelector(".format-brush-menu-item")){let l=document.createElement("button");l.addClass("clickable-icon","format-brush-menu-item"),(0,i.setTooltip)(l,"Format brush",{placement:"top"}),(0,i.setIcon)(l,"brush"),l.addEventListener("click",c=>{c.preventDefault(),c.stopPropagation(),this.showFormatBrushSubmenu(c,t)}),s.menuEl.appendChild(l),o.debug("Format brush button added to canvas menu")}return d},typeof s.render=="function"&&s.render(),this.patchedPopupMenu=!0,o.info("Canvas context menu integration set up successfully"),!0};if(!e()){let t=this.app.workspace.on("layout-change",()=>{e()&&this.app.workspace.offref(t)});this.registerEvent(t)}}catch(e){console.error("Error setting up canvas context menu integration:",e)}}getActiveCanvasView(){let e=this.app.workspace.activeLeaf;if(e&&e.view&&e.view.getViewType()==="canvas"){o.debug("Found active canvas view");let t=e.view;return o.debug("Canvas view structure:",Object.keys(t)),t.canvas?this.settings.debugMode&&o.debug("Canvas details:",{properties:Object.keys(t.canvas),hasNodes:!!t.canvas.nodes,hasSelection:!!t.canvas.selection}):o.error("Canvas property missing from view"),t}return o.debug("No active canvas view found"),null}copyFormatFromNode(e){o.debug(`copyFormatFromNode called with node: ${!!e}`);try{e&&this.settings.debugMode&&o.debug("Node details",{type:typeof e,constructorName:e.constructor?e.constructor.name:"Unknown",properties:Object.keys(e),id:e.id,isTextNode:e.text!==void 0}),this.copiedFormat={},this.settings.copyColor&&e.color!==void 0&&(o.debug(`Copying color: ${e.color}`),this.copiedFormat.color=String(e.color)),this.settings.copySize&&e.width!==void 0&&e.height!==void 0&&(o.debug(`Copying size: ${e.width}x${e.height}`),this.copiedFormat.width=Number(e.width),this.copiedFormat.height=Number(e.height)),o.debug("Copied format:",this.copiedFormat),new i.Notice("Format copied from canvas element"),this.updateStatusBar()}catch(t){o.error("Error in copyFormatFromNode:",t),new i.Notice("Error copying format")}}copyFormatColorOnlyFromNode(e){o.debug(`copyFormatColorOnlyFromNode called with node: ${!!e}`);try{e&&this.settings.debugMode&&o.debug("Node details",{type:typeof e,constructorName:e.constructor?e.constructor.name:"Unknown",properties:Object.keys(e),id:e.id,isTextNode:e.text!==void 0}),this.copiedFormat={},this.settings.copyColor&&e.color!==void 0&&(o.debug(`Copying color: ${e.color}`),this.copiedFormat.color=String(e.color)),o.debug("Copied format:",this.copiedFormat),new i.Notice("Color copied from canvas element"),this.updateStatusBar()}catch(t){o.error("Error in copyFormatColorOnlyFromNode:",t),new i.Notice("Error copying color")}}copyFormatSizeOnlyFromNode(e){o.debug(`copyFormatSizeOnlyFromNode called with node: ${!!e}`);try{e&&this.settings.debugMode&&o.debug("Node details",{type:typeof e,constructorName:e.constructor?e.constructor.name:"Unknown",properties:Object.keys(e),id:e.id,isTextNode:e.text!==void 0}),this.copiedFormat={},this.settings.copySize&&e.width!==void 0&&e.height!==void 0&&(o.debug(`Copying size: ${e.width}x${e.height}`),this.copiedFormat.width=Number(e.width),this.copiedFormat.height=Number(e.height)),o.debug("Copied format:",this.copiedFormat),new i.Notice("Size copied from canvas element"),this.updateStatusBar()}catch(t){o.error("Error in copyFormatSizeOnlyFromNode:",t),new i.Notice("Error copying size")}}pasteFormatToNode(e,t){if(!this.copiedFormat)return new i.Notice("No format copied"),!1;o.debug(`pasteFormatToNode called with node: ${!!e}`);try{this.settings.debugMode&&o.debug("Node properties:",{id:e.id,color:e.color,size:`${e.width}x${e.height}`});let a={id:e.id,color:e.color,width:e.width,height:e.height};o.debug("Original values:",a);let s={},n=!1;if(this.copiedFormat.color!==void 0&&(s.color=this.copiedFormat.color,n=!0),this.copiedFormat.width!==void 0&&this.copiedFormat.height!==void 0&&(s.width=this.copiedFormat.width,s.height=this.copiedFormat.height,n=!0),!n)return o.debug("No changes to apply"),!1;if(o.debug("Changes to apply:",s),!0)try{return s.color!==void 0&&typeof e.setColor=="function"&&(o.debug("Applying color via setColor"),e.setColor(s.color)),s.width!==void 0&&s.height!==void 0&&(typeof e.setDimensions=="function"?(o.debug("Applying size via setDimensions"),e.setDimensions(s.width,s.height)):typeof e.resize=="function"&&(o.debug("Applying size via resize"),e.resize(s.width,s.height)),e.bbox&&(o.debug("Updating bbox size directly"),e.bbox.width=s.width,e.bbox.height=s.height),o.debug("Setting width/height directly"),e.width=s.width,e.height=s.height),typeof e.update=="function"&&(o.debug("Calling node.update()"),e.update()),this.ensureCanvasUpdate(t,e),!0}catch(d){o.error("Error applying changes with direct methods:",d)}return!1}catch(a){return console.error("Error applying format to node:",a),!1}}ensureCanvasUpdate(e,t){o.debug(`Ensuring canvas update for node: ${t.id}`);try{e.canvas.nodes&&e.canvas.nodes.has(t.id)&&o.debug("Node found in canvas nodes map"),o.debug("Requesting canvas save"),e.canvas.requestSave(),typeof e.canvas.requestFrame=="function"&&(o.debug("Requesting canvas frame update"),e.canvas.requestFrame()),setTimeout(()=>{typeof e.canvas.requestFrame=="function"&&(o.debug("Delayed requesting canvas frame update"),e.canvas.requestFrame()),typeof e.canvas.render=="function"&&(o.debug("Delayed requesting canvas render"),e.canvas.render())},50)}catch(a){o.error("Error ensuring canvas update:",a)}}copyFormat(e){try{o.debug("copyFormat called");let t=Array.from(e.canvas.selection);if(o.debug("Selected elements:",t),t.length===0){o.debug("No elements selected"),new i.Notice("No canvas element selected");return}let a=t[0];if(o.debug(`Selected node type: ${typeof a}`),!a){o.debug("Selected node is null"),new i.Notice("No canvas element selected");return}this.copyFormatFromNode(a)}catch(t){console.error("Error copying format:",t),new i.Notice("Error copying format. Please try again.")}}copyFormatColorOnly(e){try{o.debug("copyFormatColorOnly called");let t=Array.from(e.canvas.selection);if(o.debug("Selected elements:",t),t.length===0){o.debug("No elements selected"),new i.Notice("No canvas element selected");return}let a=t[0];if(o.debug(`Selected node type: ${typeof a}`),!a){o.debug("Selected node is null"),new i.Notice("No canvas element selected");return}this.copyFormatColorOnlyFromNode(a)}catch(t){console.error("Error copying color:",t),new i.Notice("Error copying color. Please try again.")}}copyFormatSizeOnly(e){try{o.debug("copyFormatSizeOnly called");let t=Array.from(e.canvas.selection);if(o.debug("Selected elements:",t),t.length===0){o.debug("No elements selected"),new i.Notice("No canvas element selected");return}let a=t[0];if(o.debug(`Selected node type: ${typeof a}`),!a){o.debug("Selected node is null"),new i.Notice("No canvas element selected");return}this.copyFormatSizeOnlyFromNode(a)}catch(t){console.error("Error copying size:",t),new i.Notice("Error copying size. Please try again.")}}pasteFormat(e){if(!this.copiedFormat){new i.Notice("No format copied");return}try{o.debug("pasteFormat called"),o.debug("Canvas object:",Object.keys(e.canvas));let t=Array.from(e.canvas.selection);if(o.debug("Selected elements for paste:",t),t.length===0){o.debug("No elements selected for paste"),new i.Notice("No canvas elements selected");return}let a=0;for(let s of t)s&&this.pasteFormatToNode(s,e)&&a++;o.debug(`Modified node count: ${a}`),a>0?(new i.Notice(`Format applied to ${a} canvas element${a>1?"s":""}`),o.debug("Final requestSave() call"),e.canvas.requestSave(),setTimeout(()=>{typeof e.canvas.requestFrame=="function"&&(o.debug("Final delayed frame update"),e.canvas.requestFrame())},100)):new i.Notice("Failed to apply any formatting")}catch(t){console.error("Error pasting format:",t),new i.Notice("Error pasting format. Please try again.")}}getNodeData(e){try{if(o.debug("getNodeData called with node:",!!e),!e)return o.debug("Node is null or undefined"),null;if(o.debug("Node structure:",Object.keys(e)),typeof e.x=="number"&&typeof e.y=="number"&&typeof e.width=="number"&&typeof e.height=="number")return o.debug("Node appears to be a direct data object"),e;if(e.data&&typeof e.data=="object")return o.debug("Node has a data property"),e.data;if(typeof e.getData=="function"){o.debug("Node has a getData method");let t=e.getData();if(t)return t}return e.width!==void 0&&e.height!==void 0?(o.debug("Node has width/height as direct properties"),{id:e.id,x:e.x,y:e.y,width:e.width,height:e.height,color:e.color}):e.bbox&&typeof e.bbox=="object"?(o.debug("Node has a bbox property"),{id:e.id,x:e.x,y:e.y,width:e.bbox.width,height:e.bbox.height,color:e.color}):(o.debug("Failed to get node data from node"),null)}catch(t){return o.error("Error in getNodeData:",t),null}}async loadSettings(){this.settings=Object.assign({},v,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}updateLoggerDebugMode(){o.setDebugMode(this.settings.debugMode),o.info(`Debug mode ${this.settings.debugMode?"enabled":"disabled"}`)}initStatusBar(){this.statusBarItem=this.addStatusBarItem(),this.statusBarItem.addClass("canvas-format-brush-status"),this.updateStatusBar()}updateStatusBar(){if(!this.statusBarItem)return;let e=this.getActiveCanvasView();if(!this.settings.showStatusBarItem||!e){this.statusBarItem.addClass("status-bar-hidden"),this.statusBarItem.removeClass("status-bar-visible");return}this.statusBarItem.addClass("status-bar-visible"),this.statusBarItem.removeClass("status-bar-hidden"),this.statusBarItem.empty();let t=this.statusBarItem.createEl("div",{cls:"canvas-format-brush-container"}),a=t.createEl("div",{cls:"canvas-format-brush-icon"});(0,i.setIcon)(a,"brush");let s=t.createEl("span",{cls:"canvas-format-brush-text"});if(this.copiedFormat){if(s.setText("Format copied"),this.copiedFormat.color){let n=t.createEl("div",{cls:"canvas-format-brush-color-preview"});n.style.setProperty("--color-preview-background",this.copiedFormat.color),n.addClass("canvas-format-brush-color-preview-dynamic")}}else s.setText("No format copied")}createPopupButton(e,t,a){let s=document.createElement("button");return s.addClass("clickable-icon"),s.setAttribute("aria-label",e),(0,i.setIcon)(s,t),(0,i.setTooltip)(s,e),s.addEventListener("click",n=>{n.stopPropagation(),a(n)}),s}showFormatBrushSubmenu(e,t){let a=document.createElement("div");a.addClass("format-brush-custom-menu");let s=t.canvas.selection.size===1;if(s){let c=this.createCustomMenuItem("Copy format","clipboard-copy","copy-all-item",()=>this.copyFormat(t));a.appendChild(c);let p=this.createCustomMenuItem("Copy size","maximize-2","copy-size-item",()=>this.copyFormatSizeOnly(t));a.appendChild(p);let w=this.createCustomMenuItem("Copy color","palette","copy-color-item",()=>this.copyFormatColorOnly(t));a.appendChild(w)}if(this.copiedFormat){if(s){let p=document.createElement("div");p.addClass("format-brush-menu-separator"),a.appendChild(p)}let c=this.createCustomMenuItem("Paste format","clipboard-paste","paste-item",()=>this.pasteFormat(t));a.appendChild(c)}document.body.appendChild(a);let n=a.getBoundingClientRect(),u=e.clientX,d=e.clientY;u+n.width>window.innerWidth&&(u=window.innerWidth-n.width-10),d+n.height>window.innerHeight&&(d=window.innerHeight-n.height-10),a.style.setProperty("--menu-left-position",`${u}px`),a.style.setProperty("--menu-top-position",`${d}px`);let l=c=>{a.contains(c.target)||(a.remove(),document.removeEventListener("click",l))};setTimeout(()=>{document.addEventListener("click",l)},10)}createCustomMenuItem(e,t,a,s){let n=document.createElement("div");n.addClass("format-brush-custom-menu-item",a);let u=document.createElement("div");u.addClass("format-brush-custom-icon"),(0,i.setIcon)(u,t),n.appendChild(u);let d=document.createElement("div");return d.addClass("format-brush-custom-label"),d.setText(e),n.appendChild(d),n.addEventListener("click",l=>{l.stopPropagation(),s();let c=n.parentElement;c&&c.remove()}),n}};0&&(module.exports={});

/* nosourcemap */